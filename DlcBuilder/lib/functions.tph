// *** Collection of general purpose functions ***

// Action function: Converts a decimal number into a numeric format of given base
DEFINE_DIMORPHIC_FUNCTION TO_NUMBER_BASE
INT_VAR
  value = 0     // the decimal value to convert
  base = 16     // numeric base of output number (allowed range: 2..36)
  minDigits = 0 // minimum number of digits for the resulting number
  lowerCase = 1 // output alphanumeric digit characters in lower case
RET
  number        // as string
BEGIN
  OUTER_SPRINT number ~~
  ACTION_IF (base >= 2 AND base <= 36) BEGIN
    ACTION_DEFINE_ARRAY digits BEGIN ~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~ ~a~ ~b~ ~c~ ~d~ ~e~ ~f~ ~g~ ~h~ ~i~ ~j~ ~k~ ~l~ ~m~ ~n~ ~o~ ~p~ ~q~ ~r~ ~s~ ~t~ ~u~ ~v~ ~w~ ~x~ ~y~ ~z~ END

    // storing signed state
    ACTION_IF (value < 0) BEGIN
      OUTER_SET signed = 1
      OUTER_SET value = (NOT value) + 1
    END ELSE BEGIN
      OUTER_SET signed = 0
    END

    OUTER_WHILE (value != 0) BEGIN
      OUTER_SET remainder = value MODULO base
      OUTER_SPRINT digit $digits(~%remainder%~)
      OUTER_SPRINT number ~%digit%%number%~
      OUTER_SET value /= base
    END

    // Special: Properly handle value = 0
    ACTION_IF (~%number%~ STR_EQ ~~) BEGIN
      OUTER_SPRINT number ~0~
    END

    // ensure that minimum number of digits are defined
    OUTER_SET len = STRING_LENGTH ~%number%~
    OUTER_FOR (i = STRING_LENGTH ~%number%~; i < minDigits; ++i) BEGIN
      OUTER_SPRINT number ~0%number%~
    END

    // restoring signed state
    ACTION_IF (signed) BEGIN
      OUTER_SPRINT number ~-%number%~
    END

    ACTION_IF (NOT lowerCase) BEGIN
      ACTION_TO_UPPER ~number~
    END
  END
END


ACTION_DEFINE_ASSOCIATIVE_ARRAY a7#resource_ext BEGIN
  // type => extension
  1012 => "2DA"
  1010 => "ARE"
  1100 => "BAH"
  1000 => "BAM"
  1007 => "BCS"
  1022 => "BIO"
  1    => "BMP"
  1017 => "BS"
  1018 => "CHR"
  1002 => "CHU"
  1009 => "CRE"
  1011 => "DLG"
  1016 => "EFF"
  1024 => "FNT"
  1013 => "GAM"
  1029 => "GLSL"
  1026 => "GUI"
  1008 => "IDS"
  2050 => "INI"
  1005 => "ITM"
  1033 => "LUA"
  2052 => "MAZE"
  1032 => "MENU"
  1004 => "MOS"
  2    => "MVE"
  6    => "PLT"
  1035 => "PNG"
  1021 => "PRO"
  1028 => "PVRZ"
  1006 => "SPL"
  1027 => "SQL"
  2051 => "SRC"
  1014 => "STO"
  1003 => "TIS"
  1031 => "TOH"
  1030 => "TOT"
  1034 => "TTF"
  1020 => "VEF"
  1019 => "VVC"
  4    => "WAV"
  1023 => "WBM"
  1001 => "WED"
  5    => "WFX"
  1015 => "WMP"
END

// Patch function: Returns the file extension of the specified resource type
DEFINE_DIMORPHIC_FUNCTION GET_RESOURCE_EXT
INT_VAR type = 0  // resource type
RET resExt        // resource extension
BEGIN
  ACTION_IF (VARIABLE_IS_SET $a7#resource_ext(~%type%~)) BEGIN
    OUTER_SPRINT resExt $a7#resource_ext(~%type%~)
  END ELSE BEGIN
    OUTER_SPRINT resExt ~~
  END
END


// Action function: Allows the user to enter a string of characters which are returned in the "string" variable.
DEFINE_ACTION_FUNCTION INPUT_STRING
INT_VAR
  minLength = 1       // min. allowed number of characters in string
  maxLength = 32767   // max. allowed number of characters in string
  promptRef = "-1"    // TRA reference for prompt message
  hintRef   = "-1"    // TRA reference for hint message
STR_VAR
  regexp    = ~.+~    // entered data must match this expression
RET
  string
BEGIN
  OUTER_SET accepted = 0
  OUTER_SPRINT string ~~
  OUTER_WHILE (accepted = 0) BEGIN
    ACTION_IF (promptRef < 0) BEGIN
      PRINT ~Enter string:~
    END ELSE BEGIN
      PRINT (AT promptRef)
    END
    ACTION_READLN text
    OUTER_SET strlen = STRING_LENGTH ~%text%~
    ACTION_IF (strlen >= minLength AND strlen <= maxLength AND (~%text%~ STRING_MATCHES_REGEXP ~^%regexp%$~ == 0)) BEGIN
      OUTER_SET accepted = 1
      OUTER_SPRINT string ~%text%~
    END ELSE BEGIN
      ACTION_IF (hintRef < 0) BEGIN
        PRINT ~String must not contain spaces or tab characters.~
      END ELSE BEGIN
        PRINT (AT hintRef)
      END
    END
  END
END
